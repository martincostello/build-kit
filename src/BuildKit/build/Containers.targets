<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
  Copyright (c) Martin Costello, 2025. All rights reserved.
  Licensed under the Apache 2.0 license. See the LICENSE file in the project root for full license information.
-->
<Project>
  <!-- Set GitHub Actions step outputs for easy re-use elsewhere in a GitHub Actions workflow -->
  <Target Name="SetGitHubContainerOutputs" AfterTargets="PublishContainer" DependsOnTargets="PublishContainer" Condition=" '$(GITHUB_OUTPUT)' != '' AND ('$(ContainerRegistry)' != '' OR '$(SetGitHubContainerPublishingOutputs)' == 'true') ">
    <PropertyGroup>
      <_ContainerImage Condition=" '$(ContainerRegistry)' == '' ">$(ContainerRepository)</_ContainerImage>
      <_ContainerImage Condition=" '$(ContainerRegistry)' != '' ">$(ContainerRegistry)/$(ContainerRepository)</_ContainerImage>
      <_ContainerImage>$(_ContainerImage.ToLowerInvariant())</_ContainerImage>
      <_ContainerTag>$(_ContainerImage):github-$(GITHUB_RUN_NUMBER)</_ContainerTag>
    </PropertyGroup>
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-digest=$(GeneratedContainerDigest)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-image=$(_ContainerImage)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-tag=$(_ContainerTag)" />
  </Target>
  <!-- Configure labels for Pyroscope profiles -->
  <ItemGroup Condition=" '$(UsePyroscope)' == 'true' ">
    <ContainerEnvironmentVariable Include="PYROSCOPE_LABELS" Value="@(PyroscopeLabels->'%(Identity)', ',')" />
  </ItemGroup>
  <!-- Add the native binaries for Pyroscope to the container -->
  <Target Name="_AddPyroscopeBinaries" BeforeTargets="AssignTargetPaths" Condition=" '$(UsePyroscope)' == 'true' ">
    <Error Condition="!Exists('$(PyroscopeBinariesPath)')" Text="Cannot find the Pyroscope binaries directory '$(PyroscopeBinariesPath)'." />
    <ItemGroup>
      <Content Include="$(PyroscopeBinariesPath)\**\*" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
  <!--
    HACK The chiseled images do not contain the appropriate certificates for uploading profiles.
    See https://github.com/dotnet/dotnet-docker/issues/5045#issuecomment-2726588006.
  -->
  <PropertyGroup Condition=" '$(UsePyroscope)' == 'true' AND $(ContainerFamily.Contains('chiseled')) ">
    <_UsePyroscopeCertificateBundle>true</_UsePyroscopeCertificateBundle>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(_UsePyroscopeCertificateBundle)' == 'true' ">
    <_PyroscopeCertificateBundleFile>ca-certificates.crt</_PyroscopeCertificateBundleFile>
    <_PyroscopeCertificateBundlePath>/etc/ssl/certs/$(_PyroscopeCertificateBundleFile)</_PyroscopeCertificateBundlePath>
  </PropertyGroup>
  <Target Name="_AddPyroscopeCertificateBundle" BeforeTargets="AssignTargetPaths" Condition=" '$(_UsePyroscopeCertificateBundle)' == 'true' ">
    <Error Condition="!$([System.OperatingSystem]::IsLinux())" Text="Enabling Pyroscope for a chisled container is only supported when building on Linux." />
    <Error Condition="!Exists('$(_PyroscopeCertificateBundlePath)')" Text="Cannot find the certificate bundle file '$(_PyroscopeCertificateBundlePath)' to use with Pyroscope." />
    <ItemGroup>
      <Content Include="$(_PyroscopeCertificateBundlePath)" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
  <!-- Configure the environment variables that depend on knowing the path of the application in the container -->
  <Target Name="_ConfigurePyroscope" BeforeTargets="PublishContainer" DependsOnTargets="ComputeContainerConfig" Condition=" '$(UsePyroscope)' == 'true' ">
    <ItemGroup>
      <ContainerEnvironmentVariables Include="CORECLR_PROFILER_PATH" Value="$(ContainerWorkingDirectory)Pyroscope.Profiler.Native.so" />
      <ContainerEnvironmentVariables Include="LD_PRELOAD" Value="$(ContainerWorkingDirectory)Pyroscope.Linux.ApiWrapper.x64.so" />
    </ItemGroup>
    <ItemGroup Condition=" '$(_UsePyroscopeCertificateBundle)' == 'true' ">
      <ContainerEnvironmentVariables Include="SSL_CERT_FILE" Value="$(ContainerWorkingDirectory)$(_PyroscopeCertificateBundleFile)" />
    </ItemGroup>
  </Target>
  <!-- Use the nightly registry for the dotnet-nightly branch -->
  <Target Name="_ConfigureContainerBaseImageForNightly" BeforeTargets="ComputeContainerBaseImage">
    <PropertyGroup>
      <_GitBranch>$([MSBuild]::ValueOrDefault('$(GITHUB_HEAD_REF)', '$(GITHUB_REF_NAME)'))</_GitBranch>
    </PropertyGroup>
    <Exec Command="git rev-parse --abbrev-ref HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true" Condition=" '$(_GitBranch)' == '' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="_GitBranch" />
    </Exec>
    <CreateProperty Value="mcr.microsoft.com/dotnet/nightly/runtime-deps:$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)'))-preview-$(ContainerFamily)" Condition=" '$(ContainerBaseImage)' == '' AND '$(ContainerFamily)' != '' AND '$(_GitBranch)' == 'dotnet-nightly' ">
      <Output TaskParameter="Value" PropertyName="ContainerBaseImage" />
    </CreateProperty>
  </Target>
</Project>

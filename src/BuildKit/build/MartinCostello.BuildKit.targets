<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project>
  <Import Project="$(MSBuildThisFileDirectory)Testing.targets" Condition=" '$(IsTestProject)' == 'true' " />
  <ItemGroup>
    <Using Include="System.Globalization" />
    <Using Include="System.Text" />
  </ItemGroup>
  <PropertyGroup>
    <BuildId Condition=" '$(BuildId)' == '' ">$(GITHUB_RUN_ID)</BuildId>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(BUILD_SOURCEBRANCHNAME)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' AND '$(GITHUB_REF_NAME)' != '' ">$(GITHUB_REF_NAME)</CommitBranch>
    <CommitHash Condition=" '$(CommitHash)' == '' ">$(GITHUB_SHA)</CommitHash>
  </PropertyGroup>
  <Target Name="AddGitMetadaAssemblyAttributes"
          BeforeTargets="GetAssemblyAttributes"
          Condition=" '$(GenerateGitMetadata)' == 'true' ">
    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true" Condition=" '$(CommitHash)' == '' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitHash" />
    </Exec>
    <Exec Command="git rev-parse --abbrev-ref HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true" Condition=" '$(CommitBranch)' == '' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitBranch" />
    </Exec>
    <ItemGroup>
      <AssemblyMetadata Include="BuildId" Value="$(BuildId)" Condition=" $(BuildId) != '' " />
      <AssemblyMetadata Include="BuildTimestamp" Value="$([System.DateTime]::UtcNow.ToString('yyyy-MM-ddTHH:mm:ssK'))" />
      <AssemblyMetadata Include="CommitBranch" Value="$(CommitBranch)" Condition=" $(CommitBranch) != '' " />
      <AssemblyMetadata Include="CommitHash" Value="$(CommitHash)" Condition=" $(CommitHash) != '' " />
    </ItemGroup>
  </Target>
  <PropertyGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <_CoveragePath>$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage'))</_CoveragePath>
    <_ReportGeneratorOutputMarkdown Condition=" '$(GITHUB_SHA)' != '' ">true</_ReportGeneratorOutputMarkdown>
    <_ReportGeneratorReportTypes>HTML</_ReportGeneratorReportTypes>
    <_ReportGeneratorReportTypes Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' ">$(_ReportGeneratorReportTypes);MarkdownSummaryGitHub</_ReportGeneratorReportTypes>
    <_ReportGeneratorTargetDirectory>$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage'))</_ReportGeneratorTargetDirectory>
    <CoverletOutput>$([System.IO.Path]::Combine($(_CoveragePath), '$(MSBuildProjectName)', 'coverage'))</CoverletOutput>
    <CoverletOutputFormat>cobertura,json</CoverletOutputFormat>
    <Exclude>$(Exclude),[*.Test*]*,[xunit.*]*</Exclude>
    <ExcludeByAttribute>$(ExcludeByAttribute),GeneratedCodeAttribute</ExcludeByAttribute>
  </PropertyGroup>
  <UsingTask TaskName="WriteLinesToFileWithRetry" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Lines ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        var lines = new System.Collections.Generic.List<string>();
        foreach (var line in Lines)
        {
            lines.Add(line.ItemSpec);
        }
        int attempt = 0;
        while (attempt < 3)
        {
            try
            {
                System.IO.File.AppendAllLines(File, lines);
                break;
            }
            catch (System.IO.IOException)
            {
                attempt++;
                System.Threading.Thread.Sleep(1_000);
            }
        }
   ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateCoverageReports" AfterTargets="GenerateCoverageResultAfterTest" Condition=" '$(CollectCoverage)' == 'true' ">
    <ItemGroup>
      <_CoverageReports Include="$(_CoveragePath)\**\coverage.cobertura.xml" />
    </ItemGroup>
    <PropertyGroup>
      <_CoverageGitHubSummary>$([System.IO.Path]::Combine($(_ReportGeneratorTargetDirectory), 'SummaryGithub.md'))</_CoverageGitHubSummary>
    </PropertyGroup>
    <ReportGenerator Condition=" '@(_CoverageReports->Count())' &gt; 0 " ReportFiles="@(_CoverageReports)" ReportTypes="$(_ReportGeneratorReportTypes)" Tag="$(Version)" TargetDirectory="$(_ReportGeneratorTargetDirectory)" Title="$(AssemblyName)" VerbosityLevel="Warning" />
    <PropertyGroup Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') ">
      <_ReportSummaryContent>&lt;details&gt;&lt;summary&gt;:chart_with_upwards_trend: &lt;b&gt;$(AssemblyName) Code Coverage report&lt;/b&gt;&lt;/summary&gt;</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.IO.File]::ReadAllText('$(_CoverageGitHubSummary)'))</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)&lt;/details&gt;</_ReportSummaryContent>
    </PropertyGroup>
    <WriteLinesToFileWithRetry Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') " ContinueOnError="WarnAndContinue" File="$(GITHUB_STEP_SUMMARY)" Lines="$(_ReportSummaryContent)" />
  </Target>
  <Target Name="CleanCoverageReports">
    <RemoveDir Condition="Exists('$(_ReportGeneratorTargetDirectory)')" Directories="$(_ReportGeneratorTargetDirectory)" />
  </Target>
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanCoverageReports</CleanDependsOn>
  </PropertyGroup>
  <Target Name="SetNuGetPackageOutputs" AfterTargets="Pack" Condition=" '$(GITHUB_OUTPUT)' != '' ">
    <PropertyGroup>
      <_PackageNamesPath>$(ArtifactsPath)\package-names.txt</_PackageNamesPath>
    </PropertyGroup>
    <ReadLinesFromFile File="$(_PackageNamesPath)">
      <Output TaskParameter="Lines" ItemName="_PackageNames" />
    </ReadLinesFromFile>
    <ItemGroup>
      <_PackageNames Include="$(PackageId)" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(_PackageNames)">
      <Output TaskParameter="Filtered" ItemName="_UniquePackageNames" />
    </RemoveDuplicates>
    <PropertyGroup>
      <_UniquePackageNames>@(_UniquePackageNames->'%(Identity)', ',')</_UniquePackageNames>
    </PropertyGroup>
    <WriteLinesToFile File="$(_PackageNamesPath)" Lines="@(_UniquePackageNames)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-names=$(_UniquePackageNames)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-version=$(Version)" />
  </Target>
  <!--
  <Target Name="BundleAssets" BeforeTargets="BeforeBuild" Condition="Exists('$(ProjectDir)\package.json')">
    <Exec Command="npm ci" Condition=" !Exists('$(ProjectDir)\node_modules') AND '$(GITHUB_ACTIONS)' != '' " />
    <Exec Command="npm install" Condition=" !Exists('$(ProjectDir)\node_modules') AND '$(GITHUB_ACTIONS)' == '' " />
    <Exec Command="npm run build" Condition=" !Exists('$(ProjectDir)\wwwroot\static\js\main.js') " />
  </Target>
  -->
  <Target Name="SetGitHubContainerOutputs" AfterTargets="PublishContainer" Condition=" '$(GITHUB_OUTPUT)' != '' AND '$(ContainerRegistry)' != '' ">
    <PropertyGroup>
      <_ContainerImage>$(ContainerRegistry)/$(ContainerRepository)</_ContainerImage>
      <_ContainerImage>$(_ContainerImage.ToLowerInvariant())</_ContainerImage>
      <_ContainerTag>$(_ContainerImage):github-$(GITHUB_RUN_NUMBER)</_ContainerTag>
    </PropertyGroup>
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-digest=$(GeneratedContainerDigest)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-image=$(_ContainerImage)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="container-tag=$(_ContainerTag)" />
  </Target>
</Project>

<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project>
  <!-- Add usings for Shouldly and xunit(.v3) depending on referenced NuGet packages -->
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `Shouldly`))">
    <Using Include="Shouldly" />
  </ItemGroup>
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit`)) OR @(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit.v3`))">
    <Using Include="Xunit" />
  </ItemGroup>
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit`))">
    <Using Include="Xunit.Abstractions" />
  </ItemGroup>
  <!-- Disable code analysis rules that are not useful in test projects -->
  <PropertyGroup>
    <NoWarn>$(NoWarn);CA1062;CA1308;CA1707;CA1711;CA1812;CA1861;CA2007</NoWarn>
  </PropertyGroup>
  <!-- Automatically disable XML documentation and associated StyleCop rules -->
  <PropertyGroup>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);SA0001;SA1600</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <_ReportGeneratorOutputMarkdown Condition=" '$(IsGitHubActions)' == 'true' ">true</_ReportGeneratorOutputMarkdown>
    <CoverageOutputPath>$([MSBuild]::ValueOrDefault('$(CoverageOutputPath)', '$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage'))'))</CoverageOutputPath>
    <CoverletOutput>$([System.IO.Path]::Combine($(CoverageOutputPath), '$(MSBuildProjectName)', 'coverage'))</CoverletOutput>
  </PropertyGroup>
  <!-- Automatically exclude various common non-user code from coverage when using Coverlet -->
  <ItemGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <CoverletExclude Include="$([MSBuild]::Escape('[*.Tests]*'))" />
    <CoverletExclude Include="$([MSBuild]::Escape('[*.*Tests]*'))" />
    <CoverletExclude Include="$([MSBuild]::Escape('[xunit.*]*'))" />
    <CoverletExcludeByAttribute Include="GeneratedCodeAttribute" />
    <CoverletExcludeByFile Include="$([MSBuild]::Escape('$(ArtifactsPath)/obj/**/*'))" />
    <CoverletExcludeByFile Include="$([MSBuild]::Escape('/_/artifacts/obj/**/*'))" />
    <CoverletOutputFormats Include="cobertura" />
    <CoverletOutputFormats Include="json" />
  </ItemGroup>
  <!-- Default to JSON and Cobertura outputs when using Coverlet for use with codecov.io and ReportGenerator -->
  <ItemGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <CoverletOutputFormats Include="cobertura" />
    <CoverletOutputFormats Include="json" />
  </ItemGroup>
  <!-- Produce HTML coverage report for humans and GitHub Markdown summary for GitHub Actions workflows -->
  <ItemGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <ReportGeneratorReportTypes Include="HTML" />
    <ReportGeneratorReportTypes Include="MarkdownSummaryGitHub" Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' " />
  </ItemGroup>
  <!-- Equivalent task to WriteLinesToFile but with retries to avoid file-write concurrency issues -->
  <UsingTask TaskName="WriteLinesToFileWithRetry" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Lines ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        var lines = new System.Collections.Generic.List<string>();
        foreach (var line in Lines)
        {
            lines.Add(line.ItemSpec);
        }
        int attempt = 0;
        while (attempt < 3)
        {
            try
            {
                System.IO.File.AppendAllLines(File, lines);
                break;
            }
            catch (System.IO.IOException)
            {
                attempt++;
                System.Threading.Thread.Sleep(1_000);
            }
        }
   ]]></Code>
    </Task>
  </UsingTask>
  <!-- Create properties for Coverlet from custom Items -->
  <Target Name="CreateCoverletProperties" BeforeTargets="InstrumentModules" Condition=" '$(CollectCoverage)' == 'true' ">
    <CreateProperty Value="@(CoverletExclude->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="Exclude" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletExcludeByAttribute->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="ExcludeByAttribute" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletExcludeByFile->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="ExcludeByFile" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletInclude->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="Include" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletOutputFormats->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="CoverletOutputFormat" />
    </CreateProperty>
  </Target>
  <!-- Generate code coverage reports using ReportGenerator after Coverlet report generation -->
  <Target Name="GenerateCoverageReports" AfterTargets="GenerateCoverageResultAfterTest" Condition=" '$(CollectCoverage)' == 'true' ">
    <!-- Collect any coverage output XML files from coverlet -->
    <ItemGroup>
      <_CoverageReports Include="$(CoverageOutputPath)\**\coverage.cobertura.xml" />
    </ItemGroup>
    <PropertyGroup>
      <_CoverageGitHubSummary>$([System.IO.Path]::Combine($(CoverageOutputPath), 'SummaryGithub.md'))</_CoverageGitHubSummary>
      <_ReportGeneratorReportTypes>@(ReportGeneratorReportTypes->'%(Identity)', ';')</_ReportGeneratorReportTypes>
    </PropertyGroup>
    <!-- Generate additional coverage reports using ReportGenerator -->
    <ReportGenerator Condition=" '@(_CoverageReports->Count())' &gt; 0 " ReportFiles="@(_CoverageReports)" ReportTypes="$(_ReportGeneratorReportTypes)" Tag="$(Version)" TargetDirectory="$(CoverageOutputPath)" Title="$(AssemblyName)" VerbosityLevel="Warning" />
    <!-- Generate customized summary for GitHub Actions workflow runs -->
    <PropertyGroup Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') ">
      <_ReportSummaryContent>&lt;details&gt;&lt;summary&gt;:chart_with_upwards_trend: &lt;b&gt;$(AssemblyName) Code Coverage report&lt;/b&gt; %28$(TargetFramework)%29&lt;/summary&gt;</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.IO.File]::ReadAllText('$(_CoverageGitHubSummary)'))</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)&lt;/details&gt;</_ReportSummaryContent>
    </PropertyGroup>
    <WriteLinesToFileWithRetry Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') " ContinueOnError="WarnAndContinue" File="$(GITHUB_STEP_SUMMARY)" Lines="$(_ReportSummaryContent)" />
  </Target>
  <!-- Clean coverage reports for dotnet clean -->
  <Target Name="CleanCoverageReports">
    <RemoveDir Condition="Exists('$(CoverageOutputPath)')" Directories="$(CoverageOutputPath)" />
  </Target>
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanCoverageReports</CleanDependsOn>
  </PropertyGroup>
</Project>

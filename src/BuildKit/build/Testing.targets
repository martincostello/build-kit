<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project>
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `Shouldly`))">
    <Using Include="Shouldly" />
  </ItemGroup>
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit`)) OR @(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit.v3`))">
    <Using Include="Xunit" />
  </ItemGroup>
  <ItemGroup Condition="@(PackageReference-&gt;AnyHaveMetadataValue(`Identity`, `xunit`))">
    <Using Include="Xunit.Abstractions" />
  </ItemGroup>
  <PropertyGroup>
    <NoWarn>$(NoWarn);CA1062;CA1308;CA1707;CA1711;CA1812;CA1861;CA2007</NoWarn>
  </PropertyGroup>
  <PropertyGroup>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);SA0001;SA1600</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(BuildingInsideVisualStudio)' == 'true' ">
    <CollectCoverage>false</CollectCoverage>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <_CoveragePath>$([System.IO.Path]::Combine($(ArtifactsPath), 'coverage'))</_CoveragePath>
    <_ReportGeneratorOutputMarkdown Condition=" '$(IsGitHubActions)' == 'true' ">true</_ReportGeneratorOutputMarkdown>
    <ReportGeneratorReportTypes>$([MSBuild]::ValueOrDefault('$(ReportGeneratorReportTypes)', 'HTML'))</ReportGeneratorReportTypes>
    <ReportGeneratorReportTypes Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' ">$(ReportGeneratorReportTypes);MarkdownSummaryGitHub</ReportGeneratorReportTypes>
    <CoverletOutput>$([System.IO.Path]::Combine($(_CoveragePath), '$(MSBuildProjectName)', 'coverage'))</CoverletOutput>
    <CoverletOutputFormat>$([MSBuild]::ValueOrDefault('$(CoverletOutputFormat)', 'cobertura,json'))</CoverletOutputFormat>
  </PropertyGroup>
  <ItemGroup Condition=" '$(CollectCoverage)' == 'true' ">
    <CoverletExclude Include="$([MSBuild]::Escape('[*.Tests]*'))" />
    <CoverletExclude Include="$([MSBuild]::Escape('[*.*Tests]*'))" />
    <CoverletExclude Include="$([MSBuild]::Escape('[xunit.*]*'))" />
    <CoverletExcludeByAttribute Include="GeneratedCodeAttribute" />
    <CoverletExcludeByFile Include="$([MSBuild]::Escape('$(ArtifactsPath)/obj/**/*'))" />
  </ItemGroup>
  <UsingTask TaskName="WriteLinesToFileWithRetry" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Lines ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        var lines = new System.Collections.Generic.List<string>();
        foreach (var line in Lines)
        {
            lines.Add(line.ItemSpec);
        }
        int attempt = 0;
        while (attempt < 3)
        {
            try
            {
                System.IO.File.AppendAllLines(File, lines);
                break;
            }
            catch (System.IO.IOException)
            {
                attempt++;
                System.Threading.Thread.Sleep(1_000);
            }
        }
   ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateCoverageExclusions" BeforeTargets="InstrumentModules" Condition=" '$(CollectCoverage)' == 'true' ">
    <CreateProperty Value="@(CoverletExclude->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="Exclude" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletExcludeByAttribute->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="ExcludeByAttribute" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletExcludeByFile->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="ExcludeByFile" />
    </CreateProperty>
    <CreateProperty Value="@(CoverletInclude->'%(Identity)', ',')">
      <Output TaskParameter="Value" PropertyName="Include" />
    </CreateProperty>
  </Target>
  <Target Name="GenerateCoverageReports" AfterTargets="GenerateCoverageResultAfterTest" Condition=" '$(CollectCoverage)' == 'true' ">
    <ItemGroup>
      <_CoverageReports Include="$(_CoveragePath)\**\coverage.cobertura.xml" />
    </ItemGroup>
    <PropertyGroup>
      <_CoverageGitHubSummary>$([System.IO.Path]::Combine($(_CoveragePath), 'SummaryGithub.md'))</_CoverageGitHubSummary>
    </PropertyGroup>
    <ReportGenerator Condition=" '@(_CoverageReports->Count())' &gt; 0 " ReportFiles="@(_CoverageReports)" ReportTypes="$(_ReportGeneratorReportTypes)" Tag="$(Version)" TargetDirectory="$(_CoveragePath)" Title="$(AssemblyName)" VerbosityLevel="Warning" />
    <PropertyGroup Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') ">
      <_ReportSummaryContent>&lt;details&gt;&lt;summary&gt;:chart_with_upwards_trend: &lt;b&gt;$(AssemblyName) Code Coverage report&lt;/b&gt; %28$(TargetFramework)%29&lt;/summary&gt;</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.IO.File]::ReadAllText('$(_CoverageGitHubSummary)'))</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)$([System.Environment]::NewLine)</_ReportSummaryContent>
      <_ReportSummaryContent>$(_ReportSummaryContent)&lt;/details&gt;</_ReportSummaryContent>
    </PropertyGroup>
    <WriteLinesToFileWithRetry Condition=" '$(_ReportGeneratorOutputMarkdown)' == 'true' AND Exists('$(_CoverageGitHubSummary)') " ContinueOnError="WarnAndContinue" File="$(GITHUB_STEP_SUMMARY)" Lines="$(_ReportSummaryContent)" />
  </Target>
  <Target Name="CleanCoverageReports">
    <RemoveDir Condition="Exists('$(_CoveragePath)')" Directories="$(_CoveragePath)" />
  </Target>
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);CleanCoverageReports</CleanDependsOn>
  </PropertyGroup>
  <Target Name="SetNuGetPackageOutputs" AfterTargets="Pack" Condition=" '$(GITHUB_OUTPUT)' != '' ">
    <PropertyGroup>
      <_PackageNamesPath>$(ArtifactsPath)\package-names.txt</_PackageNamesPath>
    </PropertyGroup>
    <ReadLinesFromFile File="$(_PackageNamesPath)">
      <Output TaskParameter="Lines" ItemName="_PackageNames" />
    </ReadLinesFromFile>
    <ItemGroup>
      <_PackageNames Include="$(PackageId)" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(_PackageNames)">
      <Output TaskParameter="Filtered" ItemName="_UniquePackageNames" />
    </RemoveDuplicates>
    <PropertyGroup>
      <_UniquePackageNames>@(_UniquePackageNames->'%(Identity)', ',')</_UniquePackageNames>
    </PropertyGroup>
    <WriteLinesToFile File="$(_PackageNamesPath)" Lines="@(_UniquePackageNames)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-names=$(_UniquePackageNames)" />
    <WriteLinesToFile File="$(GITHUB_OUTPUT)" Lines="package-version=$(Version)" />
  </Target>
</Project>
